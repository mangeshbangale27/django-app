pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = 'your-aws-account-id'  // Replace with your AWS account ID
        AWS_REGION = 'us-west-2'  // Replace with your AWS region
        ECR_REPO_NAME = 'your-repo-name'  // Replace with your ECR repository name
        IMAGE_TAG = "latest"  // You can dynamically use commit hash or Jenkins build number
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Pull the latest code from GitHub
                checkout scm
            }
        }

        stage('Login to AWS ECR') {
            steps {
                script {
                    // Log in to AWS ECR using AWS CLI
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh """
                        docker build -t ${ECR_REPO_NAME}:${IMAGE_TAG} .
                    """
                }
            }
        }

        stage('Tag Docker Image') {
            steps {
                script {
                    // Tag the Docker image for pushing to ECR
                    sh """
                        docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    // Push the tagged Docker image to AWS ECR
                    sh """
                        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images after pipeline execution
            sh 'docker system prune -af'
        }

        success {
            echo 'Docker image pushed to ECR successfully!'
        }

        failure {
            echo 'Pipeline failed.'
        }
    }
}
